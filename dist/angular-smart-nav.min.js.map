{"version":3,"sources":["?","angular-smart-nav.js"],"names":["window","angular","module","directive","$window","$document","restrict","scope","link","$scope","$element","lastScrollTop","scrollingDown","isScrollingDown","currentScrollTop","isScrollingUp","calScrollDir","scrollTop","removeClass","addClass","calMinimisedMode","offsetHeight","onScroll","doc","documentElement","body","element","on"],"mappings":";;CAAA,SAAUA,GCCV,YAmBAC,SAAQC,OAAO,kBAUdC,UAAU,cACT,UACA,YACA,SAAUC,EAASC,GACjB,OACEC,SAAU,IACVC,SACAC,KAAM,SAASC,EAAQC,GAOrB,GAAIC,GAAgB,EAOhBC,GAAgB,EAOhBC,EAAkB,SAAyBC,GAC7C,MAAOA,GAAmBH,GAQxBI,EAAgB,SAAuBD,GACzC,MAA0BH,GAAnBG,GAQLE,EAAe,SAAsBC,GAClCL,GAAiBG,EAAcE,IAClCL,GAAgB,EAChBF,EAASQ,YAAY,kBACrBR,EAASS,SAAS,kBACPP,GAAiBC,EAAgBI,KAC5CL,GAAgB,EAChBF,EAASQ,YAAY,gBACrBR,EAASS,SAAS,oBASlBC,EAAmB,SAA0BH,GAC3CA,EAAYP,EAAS,GAAGW,aAC1BX,EAASS,SAAS,kBAElBT,EAASQ,YAAY,mBAUrBI,EAAW,WACb,GAAIC,GAAMlB,EAAU,GAAGmB,gBACnBC,EAAOpB,EAAU,GAAGoB,KACpBR,EAAeM,GAAOA,EAAIN,WAAeQ,GAAQA,EAAKR,WAAc,CAExED,GAAaC,GACbG,EAAiBH,GAEjBN,EAAgBM,EAGlBhB,SAAQyB,QAAQtB,GAASuB,GAAG,SAAUL,SDtHftB","file":"angular-smart-nav.min.js","sourcesContent":[null,"/*! angular-smart-nav - v0.0.1 - 2015-11-03 */\n'use strict';\n/**\n * Module that detects the last scroll direction and\n * current scroll position to then add classes for\n * when the user is scrolling up or down the page\n * to show/hide the nav when scrolling in any particular\n * direction. Also when the user has scrolled beyond the\n * height of header adds a class to allow the nav to be\n * minimized or hidden.\n *\n * When the user has scrolled down the page the class\n * `scrolling-down` will be added, when scrolling up\n * `scrolling-up`. If the user has scrolled beyond the\n * height of the nav the class `minimised-mode`.\n *\n * @module   sn.smartNav\n * @main     sn.smartNav\n * @author   SOON_\n */\nangular.module('sn.smartNav', [\n\n])\n/**\n * @example\n *  `<nav sn-smart-nav></nav>`\n * @class   snSmartNav\n * @param   {Service} $window   : Angular.js wrapper for window Object\n * @param   {Service} $document : Angular.js wrapper for document Object\n */\n.directive('snSmartNav',[\n  '$window',\n  '$document',\n  function ($window, $document){\n    return {\n      restrict: 'A',\n      scope: {},\n      link: function($scope, $element){\n        /**\n         * The last recorded scrollTop position\n         * @private\n         * @property lastScrollTop\n         * @type     {Number}\n         */\n        var lastScrollTop = 0;\n        /**\n         * True if the last scroll direction was down the page\n         * @private\n         * @property scrollingDown\n         * @type     {Boolean}\n         */\n        var scrollingDown = false;\n        /**\n         * @method isScrollingDown\n         * @private\n         * @param  {Number}  currentScrollTop\n         * @return {Boolean} True if last scroll direction is down\n         */\n        var isScrollingDown = function isScrollingDown(currentScrollTop){\n          return currentScrollTop > lastScrollTop;\n        };\n        /**\n         * @method isScrollingUp\n         * @private\n         * @param  {Number}  currentScrollTop\n         * @return {Boolean} True if last scroll direction is up\n         */\n        var isScrollingUp = function isScrollingUp(currentScrollTop){\n          return currentScrollTop < lastScrollTop;\n        };\n        /**\n         * Calulate the current scroll direction and add relevent classes\n         * @private\n         * @method calScrollDir\n         * @param  {Number} scrollTop\n         */\n        var calScrollDir = function calScrollDir(scrollTop){\n          if ( scrollingDown && isScrollingUp(scrollTop) ) {\n            scrollingDown = false;\n            $element.removeClass('scrolling-down');\n            $element.addClass('scrolling-up');\n          } else if ( !scrollingDown && isScrollingDown(scrollTop) ){\n            scrollingDown = true;\n            $element.removeClass('scrolling-up');\n            $element.addClass('scrolling-down');\n          }\n        };\n        /**\n         * Calulate if the user has scrolled beyond the height of the element\n         * @private\n         * @method calMinimisedMode\n         * @param  {Number}  scrollTop\n         */\n        var calMinimisedMode = function calMinimisedMode(scrollTop){\n          if (scrollTop > $element[0].offsetHeight) {\n            $element.addClass('minimised-mode');\n          } else {\n            $element.removeClass('minimised-mode');\n          }\n        };\n        /**\n         * window `scroll` event handler.\n         * Gets the current scroll postion and calulates\n         * scroll direction and whether to enable minimise mode\n         * @private\n         * @method onScroll\n         */\n        var onScroll = function onScroll() {\n          var doc = $document[0].documentElement,\n              body = $document[0].body,\n              scrollTop = ( (doc && doc.scrollTop) || (body && body.scrollTop) || 0 );\n\n          calScrollDir(scrollTop);\n          calMinimisedMode(scrollTop);\n\n          lastScrollTop = scrollTop;\n        };\n\n        angular.element($window).on('scroll', onScroll);\n      }\n    };\n  }\n]);\n\n//# sourceMappingURL=angular-smart-nav.js.map"]}